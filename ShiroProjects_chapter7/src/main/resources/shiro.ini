[main]
# 默认是/login.jsp
authc.loginUrl = /login
# roles 是org.apache.shiro.web.filter.authz.RolesAuthorizationFilter 类型的实例，该url指定授权失败时重定向的地址
# Perms 是 org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter 类型的实例，和 roles 类似
roles.unauthorizedUrl = /unauthorized
perms.unauthorizedUrl = /unauthorized

[users]
zhang = 123,admin
wang = 123

[roles]
admin = user:*, menu:*

[urls]
/login = anon
/unanthorized = anon
/static/** = anon
/authenticated = authc
# 等号右边意思：先使用authc代表的Filter进行认证，认证通过后再通过roles代表的Filter进行授权，即将角色[admin]绑定到该登陆者，如果绑定失败，那么根据上面第4行的配置，将跳转到/unauthorized；如果绑定成功，那么再被我们自定义的RoleServlet捕获，继续自定义操作
/role = authc, roles[admin]
/permission = authc, perms["user:create"]
# anon表示可以匿名访问，那么我们在访问/logout的时候将直接被自定义的LogoutServlet所捕获，然后进行自定义的处理
/logout = anon
# shiro也提供了logout的Filter，实现退出操作。那么在访问/logout2的url的时候会先被shiro的logout所代表的Filter处理，接收后再被自定义的LogoutServlet处理
/logout2 = logout