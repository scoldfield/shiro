Shiro 内置了登录（身份验证）的实现：

1、基于 Basic的拦截器身份验证
	1.1 在配置文件中使用authcBasic
	1.2 authcBasic.applicationName 用于弹出的登录框显示信息使用，提示用户的信息
	1.3 authcBasic 是 org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter 类型的实例

2、基于表单的拦截器身份验证
	2.1	基于表单的拦截器身份验证和我们自定义的LoginServlet类似，但是更简单，因为其已经实现了大部分登录逻辑
	2.2 authc：是 org.apache.shiro.web.filter.authc.FormAuthenticationFilter 类型的实例，其用于实现基于表单的身份验证
	2.3 authc.loginUrl：通过 loginUrl 指定当身份验证时的登录表单
	2.4 authc.usernameParam：usernameParam 指定登录表单提交的用户名参数名
	2.5 authc.passwordParam：passwordParam 指定登录表单提交的密码参数名
	2.6 authc.successUrl：successUrl指定登录成功后重定向的默认地址（默认是“/”）（如果有上一个地址会自动重定向带该地址）
	2.7 authc.failureKeyAttribute：failureKeyAttribute 指定登录失败时的 request 属性 key（默认 shiroLoginFailure），这样可以在登录表单得到该错误 key 显示相应的错误消息
	
3、授权
	3.1 shiro.ini配置文件中的roles是org.apache.shiro.web.filter.authz.RolesAuthorizationFilter 类型的实例， 通过参数指定访问时需要的角色。
	3.2 shiro.ini配置文件中的Perms是 org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter 类型的实例，和 roles 类似，只是验证权限字符串
	3.3 上面两个Filter的作用是不是用来将角色和权限绑定到相应的用户？？？？？
	
4、*.ini配置文件[urls]的作用
	对于访问的url，若与等号左边匹配，那么首先被等号右边的变量名所代表的Filter进行处理；如果我们也自定义了处理该url的servlet，然后才到我们的自定义处理
	